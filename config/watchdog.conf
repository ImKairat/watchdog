--[[
    CLI_name: Watchdog
    Version: 0.1.0
    Author: Kairat Kubanychbek uulu
    Release_date: TBD
]]--

--[[
    ========================
         Global settings
    ========================
    log_file     : Path to the log file.
    log_level    : Logging level ("trace", "debug", "info", "warn", "error").
    max_workers  : Number of worker threads for event processing.
]]--
global = {
    log_file = "/var/log/watchdog/watchdog.log",
    log_level = "info",
    max_workers = 4
}

--[[
    ========================
            Patterns
    ========================
    You can define pattern groups for reuse.
    Patterns use glob syntax:
        *.zig   - all files with .zig extension
        **/*.c  - recursive search for .c files
]]--
patterns = {
    source_files = {"*.zig", "*.c", "*.h", "*.cpp"},
    config_files = {"*.conf", "*.json", "*.yaml"},
    build_files = {"Makefile", "build.zig", "CMakeLists.txt"}
}

--[[
    ========================
          Valid_events
    ========================
    create   : A file or directory was created.
    modify   : A file was modified.
    delete   : A file or directory was deleted.
    rename   : A file or directory was renamed.
    attrib   : File attributes changed (permissions, owner, timestamps).
    open     : File was opened for reading/writing.
    close    : File was closed after opening.
    move     : File or directory was moved.
]]--

--[[
    ========================
            Watchers
    ========================
    name       : Unique watcher name.
    path       : Path to a file or directory to watch.
    recursive  : Recursive watching (true/false).
    patterns   : List of patterns or reference to patterns.*.
    events     : List of events (see Valid_events).
    debounce   : Delay before reacting (ms) to smooth out noisy changes.
    min_size   : Minimum file size to trigger action (B, KB, MB, GB).
    max_size   : Maximum file size to trigger action (B, KB, MB, GB).
    schedule   : Time-based restrictions for running actions.
    actions    : Array of actions executed when an event occurs.
        type          : "log" | "command" | "notify" etc.
        level         : Logging level (for "log").
        message       : Message text with placeholders ${file}, ${event}.
        cmd           : Command to execute (for "command").
        timeout       : Timeout in seconds.
        cwd           : Working directory for the command.
        retry         : Number of retries on failure.
        background    : Run in the background (true/false).
        ignore_errors : Do not fail on execution errors.
]]--
watchers = {
    -- Example: watching source files
    {
        name = "backend_source",
        path = "/home/user/project/src",
        recursive = true,
        patterns = patterns.source_files,
        events = {"modify", "create"},
        debounce = 500,
        min_size = "512KB",
        actions = {
            {type = "log", level = "info", message = "Source file changed: ${file}"},
            {
                type = "command",
                cmd = "zig build",
                timeout = 30,
                cwd = "/home/user/project",
                retry = 2,
                background = false
            },
            {type = "command", cmd = "notify-send 'Build triggered'", ignore_errors = true, background = true}
        },
        schedule = {
            days = {"Mon", "Tue", "Wed", "Thu", "Fri"},
            time_range = {start = "09:00", end = "18:00"}
        }
    },

    -- Example: watching an application config file
    {
        name = "config_watcher",
        path = "/etc/myapp/config.conf",
        events = {"modify"},
        debounce = 1000, -- milliseconds
        actions = {
            {type = "log", level = "warn"},
            {type = "command", cmd = "systemctl reload myapp"}
        }
    }
}
